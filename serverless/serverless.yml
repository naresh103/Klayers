service: Klayers-python37

frameworkVersion: "=1.49.0"

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'Klayers-default'}
  region: ${file(../infra/terraform.tfvars.json):aws_region.${self:provider.stage}}
  profile: ${file(../infra/terraform.tfvars.json):aws_profile.${self:provider.stage}}
  versionFunctions: false
  logRetentionInDays: 90
  environment:
    STAGE: ${self:provider.stage}

custom:
  awsRegion: ${self:provider.region}
  s3LayersName: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_layers}
  s3LayersArn: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_layers_arn}
  dbLayers: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_layers_table}
  dbLayersArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_layers_table_arn}
  dbLayersStreamArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_layers_stream_arn}
  dbReqs: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_requirements_table}
  dbReqsArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_requirements_table_arn}
  lambdaPrefix: ${ssm:/${self:service.name}/${self:provider.stage}/lambda_prefix}
  pipelineName: ${self:service.name}-${self:provider.stage}-pipeline

  # Parameter **name** for the KEK used for Github SSH Key
  kekParameter: /${self:service.name}/${self:provider.stage}/ssh_kek
  githubRepo: ${ssm:/${self:service.name}/${self:provider.stage}/github_repo}
  s3KeysName: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_keys}
  s3KeysArn: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_keys_arn}

functions:

  check:
    handler: check.main
    runtime: python3.7
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-packaging:1
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-requests:4
    timeout: 30
    memorySize: 128
    environment:
      LAYERS_DB: ${self:custom.dbLayers}
    iamRoleStatementsName: ${self:provider.stage}-check
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: ${self:custom.dbLayersArn}


  build:
    handler: build.main
    runtime: python3.7
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-pip:2
    timeout: 180
    memorySize: 1024
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      REQS_DB: ${self:custom.dbReqs}
    iamRoleStatementsName: ${self:provider.stage}-build
    iamRoleStatements:
    - Effect: Allow
      Action:
      - s3:PutObject
      - s3:GetObject
      - s3:DeleteObject
      - s3:PutObjectAcl
      - s3:GetObjectAcl
      - s3:AbortMultipartUpload
      Resource: ${self:custom.s3LayersArn}/*
    - Effect: Allow
      Action:
      - s3:ListBucket
      Resource: ${self:custom.s3LayersArn}
    - Effect: Allow
      Action:
      - dynamodb:PutItem
      - dynamodb:Query
      Resource: ${self:custom.dbReqsArn}


  deploy:
    handler: deploy.main
    runtime: python3.7
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-packaging:1
    timeout: 600
    memorySize: 384
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      REQS_DB: ${self:custom.dbReqs}
      LAYERS_DB: ${self:custom.dbLayers}
      LAMBDA_PREFIX: ${self:custom.lambdaPrefix}
    iamRoleStatementsName: ${self:provider.stage}-deploy
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        Resource: ${self:custom.dbLayersArn}
      - Effect: Allow
        Action:
        - lambda:AddLayerVersionPermission
        - lambda:GetLayerVersion
        Resource: "*"
      - Effect: Allow
        Action:
         - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: Allow
        Action:
        - s3:GetObject
        Resource: ${self:custom.s3LayersArn}/*


  publish_arns:
    handler: publish_arns.main
    runtime: python3.7
    timeout: 240
    memorySize: 256
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      LAYERS_DB: ${self:custom.dbLayers}
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
    iamRoleStatementsName: ${self:provider.stage}-publish_arns
    iamRoleStatements:
      - Effect: Allow
        Action:
        - s3:PutObject
        Resource: ${self:custom.s3LayersArn}/*
      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: ${self:custom.dbLayersArn}/index/*


  publish_reqs:
    handler: publish_reqs.main
    runtime: python3.7
    timeout: 120
    memorySize: 256
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      REQS_DB: ${self:custom.dbReqs}
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
    iamRoleStatementsName: ${self:provider.stage}-publish_reqs
    iamRoleStatements:
      - Effect: Allow
        Action:
        - s3:PutObject
        Resource: ${self:custom.s3LayersArn}/*
      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: ${self:custom.dbReqsArn}/index/*

  publish_github:
    handler: publish_to_github.handler
    runtime: provided
    memorySize: 2048
    timeout: 600
    environment:
      GITHUB_REPO: ${self:custom.githubRepo}
      KEK_PARAMETER: ${self:custom.kekParameter}
      S3_KEYS: ${self:custom.s3KeysName}
      BUCKET_NAME: ${self:custom.s3LayersName}
    iamRoleStatementsName: ${self:provider.stage}-publish_github
    iamRoleStatements:
      - Effect: Allow
        Action:
        - s3:GetObject
        Resource: ${self:custom.s3LayersArn}/*
      - Effect: Allow
        Action:
        - s3:ListBucket
        Resource: ${self:custom.s3LayersArn}
      - Effect: Allow
        Action:
          - ssm:GetParameters
          - ssm:GetParameter
        Resource:
          Fn::Join:
            - ":"
            - - arn:aws:ssm
              - ${self:provider.region}
              - Ref: AWS::AccountId
              - parameter${self:custom.kekParameter}
      - Effect: Allow
        Action:
        - s3:GetObject
        Resource: ${self:custom.s3KeysArn}/*
    layers:
      - arn:aws:lambda:${self:provider.region}:744348701589:layer:bash:8

  invoke_pipeline:
    handler: invoke_pipeline.main
    runtime: python3.7
    timeout: 120
    memorySize: 256
    environment:
      PIPELINE_ARN:
        Fn::Join:
          - ":"
          - - arn:aws:states
            - ${self:provider.region}
            - Ref: AWS::AccountId
            - stateMachine:${self:custom.pipelineName}
    iamRoleStatementsName: ${self:provider.stage}-invoke_pipeline
    iamRoleStatements:
      - Effect: Allow
        Action: states:StartExecution 
        Resource: 
          Fn::Join:
            - ":"
            - - arn:aws:states
              - ${self:provider.region}
              - Ref: AWS::AccountId
              - stateMachine:${self:custom.pipelineName}

  check_sfns:
    handler: check_exec.main
    runtime: python3.7
    timeout: 90
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-check_sfns
    iamRoleStatements:
      - Effect: Allow
        Action: states:DescribeExecution
        Resource:
          Fn::Join:
            - ":"
            - - arn:aws:states
              - ${self:provider.region}
              - Ref: AWS::AccountId
              - stateMachine:${self:custom.pipelineName}

  cleanup_packages:
    handler: cleanup_packages.main
    runtime: python3.7
    timeout: 300
    memorySize: 256
    environment:
      LAYERS_DB: ${self:custom.dbLayers}
      LAMBDA_PREFIX: ${self:custom.lambdaPrefix}
    iamRoleStatementsName: ${self:provider.stage}-cleanup_packages
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: ${self:custom.dbLayersArn}
      - Effect: Allow
        Action:
          - lambda:DeleteLayerVersion
        Resource:
          Fn::Join:
            - ":"
            - - arn:aws:lambda
              - ${self:provider.region}
              - Ref: AWS::AccountId
              - layer
              - "*"

  stream_processor:
    handler: stream_processor.main
    runtime: python3.7
    timeout: 20
    memorySize: 256
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
    iamRoleStatementsName: ${self:provider.stage}-stream_processor
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:DeleteLayerVersion
        Resource:
          Fn::Join:
            - ":"
            - - arn:aws:lambda
              - "*"  # need permissions to delete layers in other regions
              - Ref: AWS::AccountId
              - layer
              - ${self:custom.lambdaPrefix}*
              - "*"
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.dbLayersStreamArn}
          batchSize: 10

  deploy_binary:
    handler: deploy_binary.main
    runtime: python3.7
    timeout: 120
    memorySize: 384
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      REQS_DB: ${self:custom.dbReqs}
      LAYERS_DB: ${self:custom.dbLayers}
      LAMBDA_PREFIX: ${self:custom.lambdaPrefix}
    iamRoleStatementsName: ${self:provider.stage}-deployBinary
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: ${self:custom.dbLayersArn}
      - Effect: Allow
        Action:
          - lambda:AddLayerVersionPermission
          - lambda:GetLayerVersion
        Resource: "*"
      - Effect: Allow
        Action:
          - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:GetObjectTagging
        Resource: ${self:custom.s3LayersArn}/*

stepFunctions:
  stateMachines:

    invoke_pipelines:
      events:
        - schedule: cron(0 1 ? * MON *)  # runs at 1am UTC on Monday
      name: ${self:custom.pipelineName}-invoke
      definition:
        Comment: "Invoke the Check, Build and Deploy pipeline for all packages"
        StartAt: Invoke
        States:
          Invoke:
            Type: Task
            Resource:
              Fn::GetAtt: [InvokeUnderscorepipelineLambdaFunction, Arn]
            Next: WaitForCompletion
          WaitForCompletion:
            Type: Wait
            Seconds: 600
            Next: ParallelPublish
          ParallelPublish:
            Type: Parallel
            Branches:
              - StartAt: PublishArns
                States:
                  PublishArns:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [PublishUnderscorearnsLambdaFunction, Arn]
                    Retry:
                      - ErrorEquals:
                          - States.Timeout
                        MaxAttempts: 2
                        BackoffRate: 30
                        IntervalSeconds: 60
                    Catch:
                      - ErrorEquals:
                          - States.ALL
                        Next: PublishArnsFail
                    End: True
                  PublishArnsFail:
                    Type: Fail
                    Error: PublishFail
                    Cause: Unknown
              - StartAt: PublishReqs
                States:
                  PublishReqs:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [PublishUnderscorereqsLambdaFunction, Arn]
                    Retry:
                      - ErrorEquals:
                          - States.Timeout
                        MaxAttempts: 2
                        BackoffRate: 30
                        IntervalSeconds: 60
                    Catch:
                      - ErrorEquals:
                          - States.ALL
                        Next: PublishReqsFail
                    End: True
                  PublishReqsFail:
                    Type: Fail
                    Error: PublishFail
                    Cause: Unknown
            Next: PublishGithub
          PublishGithub:
            Type: Task
            Resource:
              Fn::GetAtt: [PublishUnderscoregithubLambdaFunction, Arn]
            Retry:
              - ErrorEquals:
                  - States.Timeout
                MaxAttempts: 2
                BackoffRate: 30
                IntervalSeconds: 60
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: PublishGithubFail
            Next: Done
          PublishGithubFail:
            Type: Fail
            Error: Publish to Github failed
            Cause: Timeout
          Done:
            Type: Succeed

    pipeline:
      name: ${self:custom.pipelineName}
      definition:
        Comment: "Check, Build, and Deploy Lambda Layer"
        StartAt: Check
        States:
          Check:
            Type: Task
            Resource: 
              Fn::GetAtt: [CheckLambdaFunction, Arn]
            Next: Build
            Retry: 
              - ErrorEquals:
                - States.Timeout
                MaxAttempts: 2
                BackoffRate: 30
                IntervalSeconds: 60
            Catch:
              - ErrorEquals:
                - States.ALL
                Next: CheckFail
          Build:
            Type: Task
            Resource:
              Fn::GetAtt: [BuildLambdaFunction, Arn]
            Next: Deploy
            Retry: 
              - ErrorEquals:
                - States.Timeout
                MaxAttempts: 2
                BackoffRate: 30
                IntervalSeconds: 60
            Catch:
              - ErrorEquals:
                - States.ALL
                Next: BuildFail
          Deploy:
            Type: Task
            Resource:
              Fn::GetAtt: [DeployLambdaFunction, Arn]
            Next: Done
            Retry: 
              - ErrorEquals:
                - States.Timeout
                MaxAttempts: 2
                BackoffRate: 30
                IntervalSeconds: 60
            Catch:
              - ErrorEquals:
                - States.ALL
                Next: DeployFail
          Done:
            Type: Succeed
          CheckFail:
            Type: Fail
            Error: CheckFailure
            Cause: Unknown
          BuildFail:
            Type: Fail
            Error: BuildFailure
            Cause: Unknown
          DeployFail:
            Type: Fail
            Error: DeployFailure
            Cause: Unknown

package:
  exclude:
    - package-lock.json
    - package.json
    - node_modules/**
    - serverless.yml
    - .gitignore
    - .serverless
    - config/**
  include:
    - config/${self:provider.stage}/**
